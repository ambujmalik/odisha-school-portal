-- PostgreSQL 15+ schema for 50k students with partitioning
-- File: sql/schema.sql

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- =========================
-- Reference Tables
-- =========================
CREATE TABLE districts (
  district_id SMALLSERIAL PRIMARY KEY,
  name TEXT UNIQUE NOT NULL,
  name_od TEXT, -- Odia transliteration
  population INTEGER,
  literacy_rate NUMERIC(5,2),
  schools_count INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE blocks (
  block_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  district_id SMALLINT NOT NULL REFERENCES districts(district_id),
  name TEXT NOT NULL,
  name_od TEXT,
  budget_allocated BIGINT DEFAULT 0,
  UNIQUE(district_id, name)
);

CREATE TABLE schools (
  school_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  block_id INTEGER NOT NULL REFERENCES blocks(block_id),
  school_code TEXT UNIQUE NOT NULL,
  name TEXT NOT NULL,
  name_od TEXT,
  address TEXT,
  pincode VARCHAR(10),
  phone VARCHAR(20),
  email TEXT,
  established_year SMALLINT,
  facilities JSONB DEFAULT '{}',
  total_students INTEGER DEFAULT 0,
  total_teachers INTEGER DEFAULT 0,
  status TEXT DEFAULT 'Active',
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE INDEX idx_schools_block ON schools(block_id);
CREATE INDEX idx_schools_status ON schools(status) WHERE status='Active';

-- =========================
-- Academic Structure
-- =========================
CREATE TABLE academic_years (
  ay_id SMALLSERIAL PRIMARY KEY,
  name TEXT UNIQUE NOT NULL, -- '2024-25'
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  is_current BOOLEAN DEFAULT false
);

CREATE TABLE subjects (
  subject_id SMALLSERIAL PRIMARY KEY,
  code TEXT UNIQUE NOT NULL,
  name TEXT NOT NULL,
  name_od TEXT,
  class_min SMALLINT NOT NULL,
  class_max SMALLINT NOT NULL,
  is_core BOOLEAN DEFAULT true
);

CREATE TABLE classes (
  class_id BIGSERIAL PRIMARY KEY,
  school_id INTEGER NOT NULL REFERENCES schools(school_id),
  ay_id SMALLINT NOT NULL REFERENCES academic_years(ay_id),
  class_number SMALLINT NOT NULL CHECK (class_number BETWEEN 1 AND 12),
  section TEXT NOT NULL,
  max_students SMALLINT DEFAULT 45,
  current_students INTEGER DEFAULT 0,
  UNIQUE(school_id, ay_id, class_number, section)
);

CREATE INDEX idx_classes_school_ay ON classes(school_id, ay_id);

-- =========================
-- Users (RBAC)
-- =========================
CREATE TABLE users (
  user_id BIGSERIAL PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  role TEXT NOT NULL CHECK (role IN ('student','parent','teacher','headmaster','block_officer','district_officer','secretary','admin')),
  email TEXT,
  phone VARCHAR(20),
  school_id INTEGER REFERENCES schools(school_id),
  block_id INTEGER REFERENCES blocks(block_id),
  district_id SMALLINT REFERENCES districts(district_id),
  first_name TEXT,
  last_name TEXT,
  first_name_od TEXT,
  last_name_od TEXT,
  is_active BOOLEAN DEFAULT true,
  last_login TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE INDEX idx_users_role_school ON users(role, school_id) WHERE is_active;
CREATE INDEX idx_users_username ON users(username);

-- =========================
-- Partitioned Students Table (HASH by school_id)
-- =========================
CREATE TABLE students (
  student_id BIGSERIAL NOT NULL,
  user_id BIGINT REFERENCES users(user_id),
  school_id INTEGER NOT NULL REFERENCES schools(school_id),
  district_id SMALLINT NOT NULL REFERENCES districts(district_id),
  admission_no TEXT NOT NULL,
  roll_no SMALLINT,
  first_name TEXT NOT NULL,
  last_name TEXT NOT NULL,
  first_name_od TEXT,
  last_name_od TEXT,
  gender TEXT CHECK (gender IN ('Male','Female','Other')),
  date_of_birth DATE,
  class_id BIGINT REFERENCES classes(class_id),
  class_number SMALLINT,
  section TEXT,
  category TEXT CHECK (category IN ('General','OBC','SC','ST','SEBC')),
  mother_tongue TEXT DEFAULT 'Odia',
  guardian_name TEXT,
  guardian_phone VARCHAR(20),
  guardian_email TEXT,
  address TEXT,
  aadhar VARCHAR(12),
  status TEXT DEFAULT 'Active' CHECK (status IN ('Active','Transferred','Dropped','Passed')),
  admission_date DATE DEFAULT CURRENT_DATE,
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now(),
  PRIMARY KEY (student_id, school_id)
) PARTITION BY HASH (school_id);

-- Create 8 hash partitions
DO $$
DECLARE i int;
BEGIN
  FOR i IN 0..7 LOOP
    EXECUTE format(
      'CREATE TABLE students_p%s PARTITION OF students FOR VALUES WITH (MODULUS 8, REMAINDER %s);',
      i, i
    );
  END LOOP;
END$$;

-- Student indexes (applied to all partitions)
CREATE INDEX ON students (admission_no) INCLUDE (first_name, last_name, school_id);
CREATE INDEX ON students (school_id, class_number, section) INCLUDE (status, last_name, first_name);
CREATE INDEX ON students (district_id, status) WHERE status='Active';
CREATE INDEX ON students USING gin ((first_name || ' ' || last_name) gin_trgm_ops);

-- =========================
-- Teachers
-- =========================
CREATE TABLE teachers (
  teacher_id BIGSERIAL PRIMARY KEY,
  user_id BIGINT UNIQUE REFERENCES users(user_id),
  employee_code TEXT UNIQUE,
  school_id INTEGER NOT NULL REFERENCES schools(school_id),
  designation TEXT,
  subjects TEXT[] NOT NULL,
  qualification TEXT,
  experience_years SMALLINT DEFAULT 0,
  date_of_joining DATE,
  employment_type TEXT CHECK (employment_type IN ('Permanent','Contract','Guest')),
  basic_salary NUMERIC(10,2),
  total_salary NUMERIC(10,2),
  status TEXT DEFAULT 'Active',
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE INDEX idx_teachers_school ON teachers(school_id);
CREATE INDEX idx_teachers_subjects_gin ON teachers USING GIN(subjects);

-- =========================
-- Attendance (RANGE partitioned by month)
-- =========================
CREATE TABLE student_attendance (
  attendance_id BIGSERIAL,
  student_id BIGINT NOT NULL,
  school_id INTEGER NOT NULL,
  class_number SMALLINT NOT NULL,
  attendance_date DATE NOT NULL,
  status TEXT NOT NULL CHECK (status IN ('Present','Absent','Late','Half')),
  period TEXT DEFAULT 'Full',
  marked_by BIGINT,
  remarks TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  PRIMARY KEY(attendance_id, attendance_date)
) PARTITION BY RANGE (attendance_date);

-- Create initial monthly partitions (2025)
DO $$
DECLARE
  start_date date;
  end_date date;
  part_name text;
BEGIN
  FOR m IN 1..12 LOOP
    start_date := make_date(2025, m, 1);
    end_date := start_date + INTERVAL '1 month';
    part_name := format('student_attendance_2025_%s', to_char(start_date, 'MM'));
    
    EXECUTE format(
      'CREATE TABLE %I PARTITION OF student_attendance FOR VALUES FROM (%L) TO (%L);',
      part_name, start_date, end_date
    );
  END LOOP;
END$$;

CREATE INDEX ON student_attendance (student_id, attendance_date);
CREATE INDEX ON student_attendance (school_id, attendance_date);

-- =========================
-- Examinations and Results
-- =========================
CREATE TABLE examinations (
  exam_id BIGSERIAL PRIMARY KEY,
  school_id INTEGER NOT NULL REFERENCES schools(school_id),
  ay_id SMALLINT NOT NULL REFERENCES academic_years(ay_id),
  name TEXT NOT NULL,
  exam_type TEXT CHECK (exam_type IN ('Unit','Mid','Final','Annual')),
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  total_marks SMALLINT DEFAULT 100,
  pass_marks SMALLINT DEFAULT 33,
  status TEXT DEFAULT 'Scheduled'
);

CREATE TABLE exam_results (
  result_id BIGSERIAL,
  exam_id BIGINT NOT NULL REFERENCES examinations(exam_id),
  student_id BIGINT NOT NULL,
  school_id INTEGER NOT NULL,
  subject_code TEXT NOT NULL,
  marks_obtained NUMERIC(5,2) NOT NULL,
  total_marks SMALLINT DEFAULT 100,
  percentage NUMERIC(5,2) GENERATED ALWAYS AS ((marks_obtained/total_marks)*100) STORED,
  grade TEXT,
  created_at TIMESTAMPTZ DEFAULT now(),
  PRIMARY KEY (result_id, exam_id)
) PARTITION BY LIST (exam_id);

CREATE INDEX ON exam_results (student_id, exam_id);
CREATE INDEX ON exam_results (school_id, exam_id);

-- =========================
-- Fee Management
-- =========================
CREATE TABLE fee_structure (
  fee_id BIGSERIAL PRIMARY KEY,
  school_id INTEGER NOT NULL REFERENCES schools(school_id),
  ay_id SMALLINT NOT NULL REFERENCES academic_years(ay_id),
  class_number SMALLINT NOT NULL,
  fee_type TEXT NOT NULL,
  amount NUMERIC(10,2) NOT NULL,
  due_date DATE
);

CREATE TABLE fee_payments (
  payment_id BIGSERIAL PRIMARY KEY,
  student_id BIGINT NOT NULL,
  school_id INTEGER NOT NULL,
  amount_paid NUMERIC(10,2) NOT NULL,
  payment_date DATE NOT NULL,
  method TEXT CHECK (method IN ('Cash','UPI','Online','Cheque')),
  receipt_no TEXT UNIQUE,
  created_at TIMESTAMPTZ DEFAULT now()
);

-- =========================
-- Triggers
-- =========================
CREATE OR REPLACE FUNCTION set_updated_at() RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_schools_updated BEFORE UPDATE ON schools 
  FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_students_updated BEFORE UPDATE ON students 
  FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_users_updated BEFORE UPDATE ON users 
  FOR EACH ROW EXECUTE FUNCTION set_updated_at();
CREATE TRIGGER trg_teachers_updated BEFORE UPDATE ON teachers 
  FOR EACH ROW EXECUTE FUNCTION set_updated_at();
